// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package api

import (
	"time"

	openapi_types "github.com/oapi-codegen/runtime/types"
)

// AddUserToOrganisationDto defines model for AddUserToOrganisationDto.
type AddUserToOrganisationDto struct {
	UserId string `json:"userId"`
}

// AddUserToProjectDto defines model for AddUserToProjectDto.
type AddUserToProjectDto struct {
	UserId string `json:"userId"`
}

// AddUserToTeamDto defines model for AddUserToTeamDto.
type AddUserToTeamDto struct {
	UserId string `json:"userId"`
}

// Board defines model for Board.
type Board struct {
	Columns   []BoardColumn      `json:"columns"`
	CreatedAt time.Time          `json:"createdAt"`
	Id        openapi_types.UUID `json:"id"`
	ProjectId openapi_types.UUID `json:"projectId"`
	Title     string             `json:"title"`
	UpdatedAt time.Time          `json:"updatedAt"`
}

// BoardColumn defines model for BoardColumn.
type BoardColumn struct {
	BoardId     openapi_types.UUID `json:"boardId"`
	CreatedAt   time.Time          `json:"createdAt"`
	Id          openapi_types.UUID `json:"id"`
	Position    float32            `json:"position"`
	TaskState   TaskState          `json:"taskState"`
	TaskStateId openapi_types.UUID `json:"taskStateId"`
	Tasks       []Task             `json:"tasks"`
	Title       string             `json:"title"`
	UpdatedAt   time.Time          `json:"updatedAt"`
}

// CreateBoardColumnDto defines model for CreateBoardColumnDto.
type CreateBoardColumnDto struct {
	Position    float32 `json:"position"`
	TaskStateId string  `json:"taskStateId"`
	Title       string  `json:"title"`
}

// CreateOrganisationDto defines model for CreateOrganisationDto.
type CreateOrganisationDto struct {
	Name    string `json:"name"`
	Private bool   `json:"private"`
}

// CreateProjectDto defines model for CreateProjectDto.
type CreateProjectDto struct {
	Name    string `json:"name"`
	Private bool   `json:"private"`
}

// CreateSprintDto defines model for CreateSprintDto.
type CreateSprintDto struct {
	End   time.Time `json:"end"`
	Name  string    `json:"name"`
	Start time.Time `json:"start"`
}

// CreateSubtaskDto defines model for CreateSubtaskDto.
type CreateSubtaskDto struct {
	Done bool   `json:"done"`
	Name string `json:"name"`
}

// CreateTaskCommentDto defines model for CreateTaskCommentDto.
type CreateTaskCommentDto struct {
	Comment string `json:"comment"`
}

// CreateTaskDto defines model for CreateTaskDto.
type CreateTaskDto struct {
	AssigneeId  string  `json:"assigneeId"`
	Description string  `json:"description"`
	Done        bool    `json:"done"`
	Name        string  `json:"name"`
	Position    float32 `json:"position"`
	Priority    float32 `json:"priority"`
	ProjectId   string  `json:"projectId"`
	SprintId    string  `json:"sprintId"`
	TaskStateId string  `json:"taskStateId"`
}

// CreateTaskStateDto defines model for CreateTaskStateDto.
type CreateTaskStateDto struct {
	Name string `json:"name"`
}

// CreateTeamDto defines model for CreateTeamDto.
type CreateTeamDto struct {
	Name    string `json:"name"`
	Private bool   `json:"private"`
}

// CreateUserDto defines model for CreateUserDto.
type CreateUserDto struct {
	Email    string `json:"email"`
	Password string `json:"password"`
	Username string `json:"username"`
}

// LoginUserDto defines model for LoginUserDto.
type LoginUserDto struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

// Organisation defines model for Organisation.
type Organisation struct {
	CreatedAt time.Time          `json:"createdAt"`
	Id        openapi_types.UUID `json:"id"`
	Members   []User             `json:"members"`
	Name      string             `json:"name"`
	Owner     User               `json:"owner"`
	Teams     []Team             `json:"teams"`
	UpdatedAt time.Time          `json:"updatedAt"`
}

// Project defines model for Project.
type Project struct {
	Boards     []Board            `json:"boards"`
	CreatedAt  time.Time          `json:"createdAt"`
	Id         openapi_types.UUID `json:"id"`
	Members    []User             `json:"members"`
	Name       string             `json:"name"`
	OwnerId    openapi_types.UUID `json:"ownerId"`
	Private    bool               `json:"private"`
	Sprints    []Sprint           `json:"sprints"`
	TaskStates []TaskState        `json:"taskStates"`
	Tasks      []Task             `json:"tasks"`
	TeamId     openapi_types.UUID `json:"teamId"`
	UpdatedAt  time.Time          `json:"updatedAt"`
}

// Sprint defines model for Sprint.
type Sprint struct {
	CreatedAt time.Time          `json:"createdAt"`
	End       time.Time          `json:"end"`
	Id        openapi_types.UUID `json:"id"`
	Name      string             `json:"name"`
	ProjectId openapi_types.UUID `json:"projectId"`
	Start     time.Time          `json:"start"`
	Tasks     []Task             `json:"tasks"`
	UpdatedAt time.Time          `json:"updatedAt"`
}

// Subtask defines model for Subtask.
type Subtask struct {
	CreatedAt time.Time          `json:"createdAt"`
	CreatorId openapi_types.UUID `json:"creatorId"`
	Done      bool               `json:"done"`
	Id        openapi_types.UUID `json:"id"`
	Name      string             `json:"name"`
	TaskId    openapi_types.UUID `json:"taskId"`
	UpdatedAt time.Time          `json:"updatedAt"`
}

// Task defines model for Task.
type Task struct {
	AssigneeId    openapi_types.UUID `json:"assigneeId"`
	BoardColumnId openapi_types.UUID `json:"boardColumnId"`
	Comments      []TaskComment      `json:"comments"`
	CreatedAt     time.Time          `json:"createdAt"`
	CreatorId     openapi_types.UUID `json:"creatorId"`
	Description   string             `json:"description"`
	Done          bool               `json:"done"`
	Id            openapi_types.UUID `json:"id"`
	Name          string             `json:"name"`
	Position      float32            `json:"position"`
	Priority      float32            `json:"priority"`
	ProjectId     openapi_types.UUID `json:"projectId"`
	SprintId      openapi_types.UUID `json:"sprintId"`
	Subtasks      []Subtask          `json:"subtasks"`
	TaskStateId   openapi_types.UUID `json:"taskStateId"`
	UpdatedAt     time.Time          `json:"updatedAt"`
}

// TaskComment defines model for TaskComment.
type TaskComment struct {
	Comment   string             `json:"comment"`
	CreatedAt time.Time          `json:"createdAt"`
	CreatorId openapi_types.UUID `json:"creatorId"`
	Id        openapi_types.UUID `json:"id"`
	TaskId    openapi_types.UUID `json:"taskId"`
	UpdatedAt time.Time          `json:"updatedAt"`
}

// TaskState defines model for TaskState.
type TaskState struct {
	BoardColumns []BoardColumn      `json:"boardColumns"`
	CreatedAt    time.Time          `json:"createdAt"`
	Id           openapi_types.UUID `json:"id"`
	Name         string             `json:"name"`
	ProjectId    openapi_types.UUID `json:"projectId"`
	UpdatedAt    time.Time          `json:"updatedAt"`
}

// Team defines model for Team.
type Team struct {
	CreatedAt      time.Time          `json:"createdAt"`
	Id             openapi_types.UUID `json:"id"`
	Members        []User             `json:"members"`
	Name           string             `json:"name"`
	OrganisationId openapi_types.UUID `json:"organisationId"`
	Owner          User               `json:"owner"`
	Private        bool               `json:"private"`
	Projects       []Project          `json:"projects"`
	UpdatedAt      time.Time          `json:"updatedAt"`
}

// UpdateBoardColumnDto defines model for UpdateBoardColumnDto.
type UpdateBoardColumnDto struct {
	Position    float32 `json:"position"`
	TaskStateId string  `json:"taskStateId"`
	Title       string  `json:"title"`
}

// UpdateSprintDto defines model for UpdateSprintDto.
type UpdateSprintDto struct {
	End   time.Time `json:"end"`
	Name  string    `json:"name"`
	Start time.Time `json:"start"`
}

// UpdateSubtaskDto defines model for UpdateSubtaskDto.
type UpdateSubtaskDto struct {
	Done bool   `json:"done"`
	Name string `json:"name"`
}

// UpdateTaskCommentDto defines model for UpdateTaskCommentDto.
type UpdateTaskCommentDto struct {
	Comment string `json:"comment"`
}

// UpdateTaskDto defines model for UpdateTaskDto.
type UpdateTaskDto struct {
	AssigneeId    string  `json:"assigneeId"`
	BoardColumnId string  `json:"boardColumnId"`
	Description   string  `json:"description"`
	Done          bool    `json:"done"`
	Name          string  `json:"name"`
	Position      float32 `json:"position"`
	Priority      float32 `json:"priority"`
	SprintId      string  `json:"sprintId"`
	TaskStateId   string  `json:"taskStateId"`
}

// UpdateUserDto defines model for UpdateUserDto.
type UpdateUserDto struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

// User defines model for User.
type User struct {
	CreatedAt     time.Time          `json:"createdAt"`
	Email         string             `json:"email"`
	Id            openapi_types.UUID `json:"id"`
	IsDeleted     bool               `json:"isDeleted"`
	Organisations []Organisation     `json:"organisations"`
	Password      string             `json:"password"`
	Projects      []Project          `json:"projects"`
	Teams         []Team             `json:"teams"`
	UpdatedAt     time.Time          `json:"updatedAt"`
	Username      string             `json:"username"`
}

// LoginJSONRequestBody defines body for Login for application/json ContentType.
type LoginJSONRequestBody = LoginUserDto

// CreateOrganisationJSONRequestBody defines body for CreateOrganisation for application/json ContentType.
type CreateOrganisationJSONRequestBody = CreateOrganisationDto

// AddUserToOrganisationJSONRequestBody defines body for AddUserToOrganisation for application/json ContentType.
type AddUserToOrganisationJSONRequestBody = AddUserToOrganisationDto

// CreateTeamJSONRequestBody defines body for CreateTeam for application/json ContentType.
type CreateTeamJSONRequestBody = CreateTeamDto

// AddUserToTeamJSONRequestBody defines body for AddUserToTeam for application/json ContentType.
type AddUserToTeamJSONRequestBody = AddUserToTeamDto

// CreateProjectJSONRequestBody defines body for CreateProject for application/json ContentType.
type CreateProjectJSONRequestBody = CreateProjectDto

// AddUserToProjectJSONRequestBody defines body for AddUserToProject for application/json ContentType.
type AddUserToProjectJSONRequestBody = AddUserToProjectDto

// CreateColumnJSONRequestBody defines body for CreateColumn for application/json ContentType.
type CreateColumnJSONRequestBody = CreateBoardColumnDto

// UpdateColumnJSONRequestBody defines body for UpdateColumn for application/json ContentType.
type UpdateColumnJSONRequestBody = UpdateBoardColumnDto

// CreateTaskInColumnJSONRequestBody defines body for CreateTaskInColumn for application/json ContentType.
type CreateTaskInColumnJSONRequestBody = CreateTaskDto

// CreateSprintJSONRequestBody defines body for CreateSprint for application/json ContentType.
type CreateSprintJSONRequestBody = CreateSprintDto

// UpdateSprintJSONRequestBody defines body for UpdateSprint for application/json ContentType.
type UpdateSprintJSONRequestBody = UpdateSprintDto

// CreateTaskJSONRequestBody defines body for CreateTask for application/json ContentType.
type CreateTaskJSONRequestBody = CreateTaskDto

// CreateTaskStateJSONRequestBody defines body for CreateTaskState for application/json ContentType.
type CreateTaskStateJSONRequestBody = CreateTaskStateDto

// UpdateTaskJSONRequestBody defines body for UpdateTask for application/json ContentType.
type UpdateTaskJSONRequestBody = UpdateTaskDto

// RegisterJSONRequestBody defines body for Register for application/json ContentType.
type RegisterJSONRequestBody = CreateUserDto

// CreateTaskCommentJSONRequestBody defines body for CreateTaskComment for application/json ContentType.
type CreateTaskCommentJSONRequestBody = CreateTaskCommentDto

// UpdateTaskCommentJSONRequestBody defines body for UpdateTaskComment for application/json ContentType.
type UpdateTaskCommentJSONRequestBody = UpdateTaskCommentDto

// CreateSubtaskJSONRequestBody defines body for CreateSubtask for application/json ContentType.
type CreateSubtaskJSONRequestBody = CreateSubtaskDto

// UpdateSubtaskJSONRequestBody defines body for UpdateSubtask for application/json ContentType.
type UpdateSubtaskJSONRequestBody = UpdateSubtaskDto

// UpdateUserJSONRequestBody defines body for UpdateUser for application/json ContentType.
type UpdateUserJSONRequestBody = UpdateUserDto
