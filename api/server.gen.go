// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /login)
	Login(ctx echo.Context) error

	// (GET /orgs)
	GetAllOrganisations(ctx echo.Context) error

	// (POST /orgs)
	CreateOrganisation(ctx echo.Context) error

	// (DELETE /orgs/{orgId})
	DeleteOrganisation(ctx echo.Context, orgId string) error

	// (GET /orgs/{orgId})
	GetOrganisation(ctx echo.Context, orgId string) error

	// (POST /orgs/{orgId})
	AddUserToOrganisation(ctx echo.Context, orgId string) error

	// (GET /orgs/{orgId}/projects)
	GetAllProjectsInOrganisation(ctx echo.Context, orgId string) error

	// (GET /orgs/{orgId}/teams)
	GetAllTeamsInOrg(ctx echo.Context, orgId string) error

	// (POST /orgs/{orgId}/teams)
	CreateTeam(ctx echo.Context, orgId string) error

	// (DELETE /orgs/{orgId}/teams/{teamId})
	DeleteTeam(ctx echo.Context, orgId string, teamId string) error

	// (GET /orgs/{orgId}/teams/{teamId})
	GetTeam(ctx echo.Context, orgId string, teamId string) error

	// (POST /orgs/{orgId}/teams/{teamId})
	AddUserToTeam(ctx echo.Context, orgId string, teamId string) error

	// (GET /orgs/{orgId}/teams/{teamId}/projects)
	GetAllProjectsInTeam(ctx echo.Context, orgId string, teamId string) error

	// (POST /orgs/{orgId}/teams/{teamId}/projects)
	CreateProject(ctx echo.Context, orgId string, teamId string) error

	// (DELETE /orgs/{orgId}/teams/{teamId}/projects/{projectId})
	DeleteProject(ctx echo.Context, orgId string, teamId string, projectId string) error

	// (POST /orgs/{orgId}/teams/{teamId}/projects/{projectId})
	AddUserToProject(ctx echo.Context, orgId string, teamId string, projectId string) error

	// (GET /projects)
	GetAllProjectsForUser(ctx echo.Context) error

	// (GET /projects/{projectId})
	GetProject(ctx echo.Context, projectId string) error

	// (GET /projects/{projectId}/backlog/tasks)
	GetBacklog(ctx echo.Context, projectId string) error

	// (GET /projects/{projectId}/board)
	GetBoard(ctx echo.Context, projectId string) error

	// (GET /projects/{projectId}/board/columns)
	GetAllColumns(ctx echo.Context, projectId string) error

	// (POST /projects/{projectId}/board/columns)
	CreateColumn(ctx echo.Context, projectId string) error

	// (DELETE /projects/{projectId}/board/columns/{columnId})
	DeleteColumn(ctx echo.Context, projectId string, columnId string) error

	// (GET /projects/{projectId}/board/columns/{columnId})
	GetColumn(ctx echo.Context, projectId string, columnId string) error

	// (PATCH /projects/{projectId}/board/columns/{columnId})
	UpdateColumn(ctx echo.Context, projectId string, columnId string) error

	// (GET /projects/{projectId}/board/columns/{columnId}/tasks)
	GetAllTasksInColumn(ctx echo.Context, projectId string, columnId string) error

	// (POST /projects/{projectId}/board/columns/{columnId}/tasks)
	CreateTaskInColumn(ctx echo.Context, projectId string, columnId string) error

	// (GET /projects/{projectId}/members)
	GetAllProjectMembers(ctx echo.Context, projectId string) error

	// (GET /projects/{projectId}/sprints)
	GetAllSprints(ctx echo.Context, projectId string) error

	// (POST /projects/{projectId}/sprints)
	CreateSprint(ctx echo.Context, projectId string) error

	// (DELETE /projects/{projectId}/sprints/{sprintId})
	DeleteSprint(ctx echo.Context, projectId string, sprintId string) error

	// (GET /projects/{projectId}/sprints/{sprintId})
	GetSprint(ctx echo.Context, projectId string, sprintId string) error

	// (PATCH /projects/{projectId}/sprints/{sprintId})
	UpdateSprint(ctx echo.Context, projectId string, sprintId string) error

	// (GET /projects/{projectId}/tasks)
	GetAllTasks(ctx echo.Context, projectId string) error

	// (POST /projects/{projectId}/tasks)
	CreateTask(ctx echo.Context, projectId string) error

	// (POST /projects/{projectId}/tasks/states)
	CreateTaskState(ctx echo.Context, projectId string) error

	// (DELETE /projects/{projectId}/tasks/{taskId})
	DeleteTask(ctx echo.Context, projectId string, taskId string) error

	// (GET /projects/{projectId}/tasks/{taskId})
	GetTask(ctx echo.Context, projectId string, taskId string) error

	// (PATCH /projects/{projectId}/tasks/{taskId})
	UpdateTask(ctx echo.Context, projectId string, taskId string) error

	// (POST /register)
	Register(ctx echo.Context) error

	// (POST /tasks/{taskId}/comments)
	CreateTaskComment(ctx echo.Context, taskId string) error

	// (DELETE /tasks/{taskId}/comments/{commentId})
	DeleteTaskComment(ctx echo.Context, taskId string, commentId string) error

	// (PATCH /tasks/{taskId}/comments/{commentId})
	UpdateTaskComment(ctx echo.Context, taskId string, commentId string) error

	// (POST /tasks/{taskId}/subtasks)
	CreateSubtask(ctx echo.Context, taskId string) error

	// (DELETE /tasks/{taskId}/subtasks/{subtaskId})
	DeleteSubtask(ctx echo.Context, taskId string, subtaskId string) error

	// (PATCH /tasks/{taskId}/subtasks/{subtaskId})
	UpdateSubtask(ctx echo.Context, taskId string, subtaskId string) error

	// (GET /teams)
	GetAllTeams(ctx echo.Context) error

	// (GET /users)
	GetAllUsers(ctx echo.Context) error

	// (DELETE /users/{userId})
	DeleteUser(ctx echo.Context, userId string) error

	// (GET /users/{userId})
	GetUser(ctx echo.Context, userId string) error

	// (PATCH /users/{userId})
	UpdateUser(ctx echo.Context, userId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// Login converts echo context to params.
func (w *ServerInterfaceWrapper) Login(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Login(ctx)
	return err
}

// GetAllOrganisations converts echo context to params.
func (w *ServerInterfaceWrapper) GetAllOrganisations(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAllOrganisations(ctx)
	return err
}

// CreateOrganisation converts echo context to params.
func (w *ServerInterfaceWrapper) CreateOrganisation(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateOrganisation(ctx)
	return err
}

// DeleteOrganisation converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteOrganisation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "orgId" -------------
	var orgId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "orgId", runtime.ParamLocationPath, ctx.Param("orgId"), &orgId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orgId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteOrganisation(ctx, orgId)
	return err
}

// GetOrganisation converts echo context to params.
func (w *ServerInterfaceWrapper) GetOrganisation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "orgId" -------------
	var orgId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "orgId", runtime.ParamLocationPath, ctx.Param("orgId"), &orgId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orgId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetOrganisation(ctx, orgId)
	return err
}

// AddUserToOrganisation converts echo context to params.
func (w *ServerInterfaceWrapper) AddUserToOrganisation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "orgId" -------------
	var orgId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "orgId", runtime.ParamLocationPath, ctx.Param("orgId"), &orgId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orgId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AddUserToOrganisation(ctx, orgId)
	return err
}

// GetAllProjectsInOrganisation converts echo context to params.
func (w *ServerInterfaceWrapper) GetAllProjectsInOrganisation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "orgId" -------------
	var orgId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "orgId", runtime.ParamLocationPath, ctx.Param("orgId"), &orgId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orgId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAllProjectsInOrganisation(ctx, orgId)
	return err
}

// GetAllTeamsInOrg converts echo context to params.
func (w *ServerInterfaceWrapper) GetAllTeamsInOrg(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "orgId" -------------
	var orgId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "orgId", runtime.ParamLocationPath, ctx.Param("orgId"), &orgId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orgId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAllTeamsInOrg(ctx, orgId)
	return err
}

// CreateTeam converts echo context to params.
func (w *ServerInterfaceWrapper) CreateTeam(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "orgId" -------------
	var orgId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "orgId", runtime.ParamLocationPath, ctx.Param("orgId"), &orgId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orgId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateTeam(ctx, orgId)
	return err
}

// DeleteTeam converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTeam(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "orgId" -------------
	var orgId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "orgId", runtime.ParamLocationPath, ctx.Param("orgId"), &orgId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orgId: %s", err))
	}

	// ------------- Path parameter "teamId" -------------
	var teamId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "teamId", runtime.ParamLocationPath, ctx.Param("teamId"), &teamId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter teamId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteTeam(ctx, orgId, teamId)
	return err
}

// GetTeam converts echo context to params.
func (w *ServerInterfaceWrapper) GetTeam(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "orgId" -------------
	var orgId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "orgId", runtime.ParamLocationPath, ctx.Param("orgId"), &orgId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orgId: %s", err))
	}

	// ------------- Path parameter "teamId" -------------
	var teamId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "teamId", runtime.ParamLocationPath, ctx.Param("teamId"), &teamId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter teamId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTeam(ctx, orgId, teamId)
	return err
}

// AddUserToTeam converts echo context to params.
func (w *ServerInterfaceWrapper) AddUserToTeam(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "orgId" -------------
	var orgId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "orgId", runtime.ParamLocationPath, ctx.Param("orgId"), &orgId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orgId: %s", err))
	}

	// ------------- Path parameter "teamId" -------------
	var teamId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "teamId", runtime.ParamLocationPath, ctx.Param("teamId"), &teamId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter teamId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AddUserToTeam(ctx, orgId, teamId)
	return err
}

// GetAllProjectsInTeam converts echo context to params.
func (w *ServerInterfaceWrapper) GetAllProjectsInTeam(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "orgId" -------------
	var orgId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "orgId", runtime.ParamLocationPath, ctx.Param("orgId"), &orgId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orgId: %s", err))
	}

	// ------------- Path parameter "teamId" -------------
	var teamId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "teamId", runtime.ParamLocationPath, ctx.Param("teamId"), &teamId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter teamId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAllProjectsInTeam(ctx, orgId, teamId)
	return err
}

// CreateProject converts echo context to params.
func (w *ServerInterfaceWrapper) CreateProject(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "orgId" -------------
	var orgId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "orgId", runtime.ParamLocationPath, ctx.Param("orgId"), &orgId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orgId: %s", err))
	}

	// ------------- Path parameter "teamId" -------------
	var teamId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "teamId", runtime.ParamLocationPath, ctx.Param("teamId"), &teamId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter teamId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateProject(ctx, orgId, teamId)
	return err
}

// DeleteProject converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteProject(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "orgId" -------------
	var orgId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "orgId", runtime.ParamLocationPath, ctx.Param("orgId"), &orgId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orgId: %s", err))
	}

	// ------------- Path parameter "teamId" -------------
	var teamId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "teamId", runtime.ParamLocationPath, ctx.Param("teamId"), &teamId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter teamId: %s", err))
	}

	// ------------- Path parameter "projectId" -------------
	var projectId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "projectId", runtime.ParamLocationPath, ctx.Param("projectId"), &projectId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteProject(ctx, orgId, teamId, projectId)
	return err
}

// AddUserToProject converts echo context to params.
func (w *ServerInterfaceWrapper) AddUserToProject(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "orgId" -------------
	var orgId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "orgId", runtime.ParamLocationPath, ctx.Param("orgId"), &orgId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orgId: %s", err))
	}

	// ------------- Path parameter "teamId" -------------
	var teamId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "teamId", runtime.ParamLocationPath, ctx.Param("teamId"), &teamId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter teamId: %s", err))
	}

	// ------------- Path parameter "projectId" -------------
	var projectId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "projectId", runtime.ParamLocationPath, ctx.Param("projectId"), &projectId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AddUserToProject(ctx, orgId, teamId, projectId)
	return err
}

// GetAllProjectsForUser converts echo context to params.
func (w *ServerInterfaceWrapper) GetAllProjectsForUser(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAllProjectsForUser(ctx)
	return err
}

// GetProject converts echo context to params.
func (w *ServerInterfaceWrapper) GetProject(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "projectId" -------------
	var projectId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "projectId", runtime.ParamLocationPath, ctx.Param("projectId"), &projectId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetProject(ctx, projectId)
	return err
}

// GetBacklog converts echo context to params.
func (w *ServerInterfaceWrapper) GetBacklog(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "projectId" -------------
	var projectId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "projectId", runtime.ParamLocationPath, ctx.Param("projectId"), &projectId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetBacklog(ctx, projectId)
	return err
}

// GetBoard converts echo context to params.
func (w *ServerInterfaceWrapper) GetBoard(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "projectId" -------------
	var projectId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "projectId", runtime.ParamLocationPath, ctx.Param("projectId"), &projectId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetBoard(ctx, projectId)
	return err
}

// GetAllColumns converts echo context to params.
func (w *ServerInterfaceWrapper) GetAllColumns(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "projectId" -------------
	var projectId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "projectId", runtime.ParamLocationPath, ctx.Param("projectId"), &projectId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAllColumns(ctx, projectId)
	return err
}

// CreateColumn converts echo context to params.
func (w *ServerInterfaceWrapper) CreateColumn(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "projectId" -------------
	var projectId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "projectId", runtime.ParamLocationPath, ctx.Param("projectId"), &projectId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateColumn(ctx, projectId)
	return err
}

// DeleteColumn converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteColumn(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "projectId" -------------
	var projectId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "projectId", runtime.ParamLocationPath, ctx.Param("projectId"), &projectId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectId: %s", err))
	}

	// ------------- Path parameter "columnId" -------------
	var columnId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "columnId", runtime.ParamLocationPath, ctx.Param("columnId"), &columnId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter columnId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteColumn(ctx, projectId, columnId)
	return err
}

// GetColumn converts echo context to params.
func (w *ServerInterfaceWrapper) GetColumn(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "projectId" -------------
	var projectId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "projectId", runtime.ParamLocationPath, ctx.Param("projectId"), &projectId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectId: %s", err))
	}

	// ------------- Path parameter "columnId" -------------
	var columnId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "columnId", runtime.ParamLocationPath, ctx.Param("columnId"), &columnId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter columnId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetColumn(ctx, projectId, columnId)
	return err
}

// UpdateColumn converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateColumn(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "projectId" -------------
	var projectId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "projectId", runtime.ParamLocationPath, ctx.Param("projectId"), &projectId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectId: %s", err))
	}

	// ------------- Path parameter "columnId" -------------
	var columnId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "columnId", runtime.ParamLocationPath, ctx.Param("columnId"), &columnId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter columnId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateColumn(ctx, projectId, columnId)
	return err
}

// GetAllTasksInColumn converts echo context to params.
func (w *ServerInterfaceWrapper) GetAllTasksInColumn(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "projectId" -------------
	var projectId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "projectId", runtime.ParamLocationPath, ctx.Param("projectId"), &projectId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectId: %s", err))
	}

	// ------------- Path parameter "columnId" -------------
	var columnId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "columnId", runtime.ParamLocationPath, ctx.Param("columnId"), &columnId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter columnId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAllTasksInColumn(ctx, projectId, columnId)
	return err
}

// CreateTaskInColumn converts echo context to params.
func (w *ServerInterfaceWrapper) CreateTaskInColumn(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "projectId" -------------
	var projectId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "projectId", runtime.ParamLocationPath, ctx.Param("projectId"), &projectId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectId: %s", err))
	}

	// ------------- Path parameter "columnId" -------------
	var columnId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "columnId", runtime.ParamLocationPath, ctx.Param("columnId"), &columnId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter columnId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateTaskInColumn(ctx, projectId, columnId)
	return err
}

// GetAllProjectMembers converts echo context to params.
func (w *ServerInterfaceWrapper) GetAllProjectMembers(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "projectId" -------------
	var projectId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "projectId", runtime.ParamLocationPath, ctx.Param("projectId"), &projectId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAllProjectMembers(ctx, projectId)
	return err
}

// GetAllSprints converts echo context to params.
func (w *ServerInterfaceWrapper) GetAllSprints(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "projectId" -------------
	var projectId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "projectId", runtime.ParamLocationPath, ctx.Param("projectId"), &projectId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAllSprints(ctx, projectId)
	return err
}

// CreateSprint converts echo context to params.
func (w *ServerInterfaceWrapper) CreateSprint(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "projectId" -------------
	var projectId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "projectId", runtime.ParamLocationPath, ctx.Param("projectId"), &projectId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateSprint(ctx, projectId)
	return err
}

// DeleteSprint converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteSprint(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "projectId" -------------
	var projectId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "projectId", runtime.ParamLocationPath, ctx.Param("projectId"), &projectId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectId: %s", err))
	}

	// ------------- Path parameter "sprintId" -------------
	var sprintId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "sprintId", runtime.ParamLocationPath, ctx.Param("sprintId"), &sprintId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sprintId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteSprint(ctx, projectId, sprintId)
	return err
}

// GetSprint converts echo context to params.
func (w *ServerInterfaceWrapper) GetSprint(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "projectId" -------------
	var projectId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "projectId", runtime.ParamLocationPath, ctx.Param("projectId"), &projectId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectId: %s", err))
	}

	// ------------- Path parameter "sprintId" -------------
	var sprintId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "sprintId", runtime.ParamLocationPath, ctx.Param("sprintId"), &sprintId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sprintId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSprint(ctx, projectId, sprintId)
	return err
}

// UpdateSprint converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateSprint(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "projectId" -------------
	var projectId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "projectId", runtime.ParamLocationPath, ctx.Param("projectId"), &projectId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectId: %s", err))
	}

	// ------------- Path parameter "sprintId" -------------
	var sprintId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "sprintId", runtime.ParamLocationPath, ctx.Param("sprintId"), &sprintId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sprintId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateSprint(ctx, projectId, sprintId)
	return err
}

// GetAllTasks converts echo context to params.
func (w *ServerInterfaceWrapper) GetAllTasks(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "projectId" -------------
	var projectId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "projectId", runtime.ParamLocationPath, ctx.Param("projectId"), &projectId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAllTasks(ctx, projectId)
	return err
}

// CreateTask converts echo context to params.
func (w *ServerInterfaceWrapper) CreateTask(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "projectId" -------------
	var projectId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "projectId", runtime.ParamLocationPath, ctx.Param("projectId"), &projectId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateTask(ctx, projectId)
	return err
}

// CreateTaskState converts echo context to params.
func (w *ServerInterfaceWrapper) CreateTaskState(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "projectId" -------------
	var projectId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "projectId", runtime.ParamLocationPath, ctx.Param("projectId"), &projectId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateTaskState(ctx, projectId)
	return err
}

// DeleteTask converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTask(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "projectId" -------------
	var projectId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "projectId", runtime.ParamLocationPath, ctx.Param("projectId"), &projectId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectId: %s", err))
	}

	// ------------- Path parameter "taskId" -------------
	var taskId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "taskId", runtime.ParamLocationPath, ctx.Param("taskId"), &taskId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter taskId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteTask(ctx, projectId, taskId)
	return err
}

// GetTask converts echo context to params.
func (w *ServerInterfaceWrapper) GetTask(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "projectId" -------------
	var projectId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "projectId", runtime.ParamLocationPath, ctx.Param("projectId"), &projectId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectId: %s", err))
	}

	// ------------- Path parameter "taskId" -------------
	var taskId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "taskId", runtime.ParamLocationPath, ctx.Param("taskId"), &taskId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter taskId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTask(ctx, projectId, taskId)
	return err
}

// UpdateTask converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateTask(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "projectId" -------------
	var projectId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "projectId", runtime.ParamLocationPath, ctx.Param("projectId"), &projectId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter projectId: %s", err))
	}

	// ------------- Path parameter "taskId" -------------
	var taskId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "taskId", runtime.ParamLocationPath, ctx.Param("taskId"), &taskId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter taskId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateTask(ctx, projectId, taskId)
	return err
}

// Register converts echo context to params.
func (w *ServerInterfaceWrapper) Register(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Register(ctx)
	return err
}

// CreateTaskComment converts echo context to params.
func (w *ServerInterfaceWrapper) CreateTaskComment(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "taskId" -------------
	var taskId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "taskId", runtime.ParamLocationPath, ctx.Param("taskId"), &taskId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter taskId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateTaskComment(ctx, taskId)
	return err
}

// DeleteTaskComment converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTaskComment(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "taskId" -------------
	var taskId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "taskId", runtime.ParamLocationPath, ctx.Param("taskId"), &taskId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter taskId: %s", err))
	}

	// ------------- Path parameter "commentId" -------------
	var commentId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "commentId", runtime.ParamLocationPath, ctx.Param("commentId"), &commentId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter commentId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteTaskComment(ctx, taskId, commentId)
	return err
}

// UpdateTaskComment converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateTaskComment(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "taskId" -------------
	var taskId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "taskId", runtime.ParamLocationPath, ctx.Param("taskId"), &taskId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter taskId: %s", err))
	}

	// ------------- Path parameter "commentId" -------------
	var commentId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "commentId", runtime.ParamLocationPath, ctx.Param("commentId"), &commentId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter commentId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateTaskComment(ctx, taskId, commentId)
	return err
}

// CreateSubtask converts echo context to params.
func (w *ServerInterfaceWrapper) CreateSubtask(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "taskId" -------------
	var taskId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "taskId", runtime.ParamLocationPath, ctx.Param("taskId"), &taskId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter taskId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateSubtask(ctx, taskId)
	return err
}

// DeleteSubtask converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteSubtask(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "taskId" -------------
	var taskId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "taskId", runtime.ParamLocationPath, ctx.Param("taskId"), &taskId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter taskId: %s", err))
	}

	// ------------- Path parameter "subtaskId" -------------
	var subtaskId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "subtaskId", runtime.ParamLocationPath, ctx.Param("subtaskId"), &subtaskId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter subtaskId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteSubtask(ctx, taskId, subtaskId)
	return err
}

// UpdateSubtask converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateSubtask(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "taskId" -------------
	var taskId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "taskId", runtime.ParamLocationPath, ctx.Param("taskId"), &taskId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter taskId: %s", err))
	}

	// ------------- Path parameter "subtaskId" -------------
	var subtaskId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "subtaskId", runtime.ParamLocationPath, ctx.Param("subtaskId"), &subtaskId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter subtaskId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateSubtask(ctx, taskId, subtaskId)
	return err
}

// GetAllTeams converts echo context to params.
func (w *ServerInterfaceWrapper) GetAllTeams(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAllTeams(ctx)
	return err
}

// GetAllUsers converts echo context to params.
func (w *ServerInterfaceWrapper) GetAllUsers(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAllUsers(ctx)
	return err
}

// DeleteUser converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, ctx.Param("userId"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteUser(ctx, userId)
	return err
}

// GetUser converts echo context to params.
func (w *ServerInterfaceWrapper) GetUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, ctx.Param("userId"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUser(ctx, userId)
	return err
}

// UpdateUser converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, ctx.Param("userId"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateUser(ctx, userId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/login", wrapper.Login)
	router.GET(baseURL+"/orgs", wrapper.GetAllOrganisations)
	router.POST(baseURL+"/orgs", wrapper.CreateOrganisation)
	router.DELETE(baseURL+"/orgs/:orgId", wrapper.DeleteOrganisation)
	router.GET(baseURL+"/orgs/:orgId", wrapper.GetOrganisation)
	router.POST(baseURL+"/orgs/:orgId", wrapper.AddUserToOrganisation)
	router.GET(baseURL+"/orgs/:orgId/projects", wrapper.GetAllProjectsInOrganisation)
	router.GET(baseURL+"/orgs/:orgId/teams", wrapper.GetAllTeamsInOrg)
	router.POST(baseURL+"/orgs/:orgId/teams", wrapper.CreateTeam)
	router.DELETE(baseURL+"/orgs/:orgId/teams/:teamId", wrapper.DeleteTeam)
	router.GET(baseURL+"/orgs/:orgId/teams/:teamId", wrapper.GetTeam)
	router.POST(baseURL+"/orgs/:orgId/teams/:teamId", wrapper.AddUserToTeam)
	router.GET(baseURL+"/orgs/:orgId/teams/:teamId/projects", wrapper.GetAllProjectsInTeam)
	router.POST(baseURL+"/orgs/:orgId/teams/:teamId/projects", wrapper.CreateProject)
	router.DELETE(baseURL+"/orgs/:orgId/teams/:teamId/projects/:projectId", wrapper.DeleteProject)
	router.POST(baseURL+"/orgs/:orgId/teams/:teamId/projects/:projectId", wrapper.AddUserToProject)
	router.GET(baseURL+"/projects", wrapper.GetAllProjectsForUser)
	router.GET(baseURL+"/projects/:projectId", wrapper.GetProject)
	router.GET(baseURL+"/projects/:projectId/backlog/tasks", wrapper.GetBacklog)
	router.GET(baseURL+"/projects/:projectId/board", wrapper.GetBoard)
	router.GET(baseURL+"/projects/:projectId/board/columns", wrapper.GetAllColumns)
	router.POST(baseURL+"/projects/:projectId/board/columns", wrapper.CreateColumn)
	router.DELETE(baseURL+"/projects/:projectId/board/columns/:columnId", wrapper.DeleteColumn)
	router.GET(baseURL+"/projects/:projectId/board/columns/:columnId", wrapper.GetColumn)
	router.PATCH(baseURL+"/projects/:projectId/board/columns/:columnId", wrapper.UpdateColumn)
	router.GET(baseURL+"/projects/:projectId/board/columns/:columnId/tasks", wrapper.GetAllTasksInColumn)
	router.POST(baseURL+"/projects/:projectId/board/columns/:columnId/tasks", wrapper.CreateTaskInColumn)
	router.GET(baseURL+"/projects/:projectId/members", wrapper.GetAllProjectMembers)
	router.GET(baseURL+"/projects/:projectId/sprints", wrapper.GetAllSprints)
	router.POST(baseURL+"/projects/:projectId/sprints", wrapper.CreateSprint)
	router.DELETE(baseURL+"/projects/:projectId/sprints/:sprintId", wrapper.DeleteSprint)
	router.GET(baseURL+"/projects/:projectId/sprints/:sprintId", wrapper.GetSprint)
	router.PATCH(baseURL+"/projects/:projectId/sprints/:sprintId", wrapper.UpdateSprint)
	router.GET(baseURL+"/projects/:projectId/tasks", wrapper.GetAllTasks)
	router.POST(baseURL+"/projects/:projectId/tasks", wrapper.CreateTask)
	router.POST(baseURL+"/projects/:projectId/tasks/states", wrapper.CreateTaskState)
	router.DELETE(baseURL+"/projects/:projectId/tasks/:taskId", wrapper.DeleteTask)
	router.GET(baseURL+"/projects/:projectId/tasks/:taskId", wrapper.GetTask)
	router.PATCH(baseURL+"/projects/:projectId/tasks/:taskId", wrapper.UpdateTask)
	router.POST(baseURL+"/register", wrapper.Register)
	router.POST(baseURL+"/tasks/:taskId/comments", wrapper.CreateTaskComment)
	router.DELETE(baseURL+"/tasks/:taskId/comments/:commentId", wrapper.DeleteTaskComment)
	router.PATCH(baseURL+"/tasks/:taskId/comments/:commentId", wrapper.UpdateTaskComment)
	router.POST(baseURL+"/tasks/:taskId/subtasks", wrapper.CreateSubtask)
	router.DELETE(baseURL+"/tasks/:taskId/subtasks/:subtaskId", wrapper.DeleteSubtask)
	router.PATCH(baseURL+"/tasks/:taskId/subtasks/:subtaskId", wrapper.UpdateSubtask)
	router.GET(baseURL+"/teams", wrapper.GetAllTeams)
	router.GET(baseURL+"/users", wrapper.GetAllUsers)
	router.DELETE(baseURL+"/users/:userId", wrapper.DeleteUser)
	router.GET(baseURL+"/users/:userId", wrapper.GetUser)
	router.PATCH(baseURL+"/users/:userId", wrapper.UpdateUser)

}

type LoginRequestObject struct {
	Body *LoginJSONRequestBody
}

type LoginResponseObject interface {
	VisitLoginResponse(w http.ResponseWriter) error
}

type Login200Response struct {
}

func (response Login200Response) VisitLoginResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type GetAllOrganisationsRequestObject struct {
}

type GetAllOrganisationsResponseObject interface {
	VisitGetAllOrganisationsResponse(w http.ResponseWriter) error
}

type GetAllOrganisations200JSONResponse []Organisation

func (response GetAllOrganisations200JSONResponse) VisitGetAllOrganisationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateOrganisationRequestObject struct {
	Body *CreateOrganisationJSONRequestBody
}

type CreateOrganisationResponseObject interface {
	VisitCreateOrganisationResponse(w http.ResponseWriter) error
}

type CreateOrganisation201JSONResponse Organisation

func (response CreateOrganisation201JSONResponse) VisitCreateOrganisationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type DeleteOrganisationRequestObject struct {
	OrgId string `json:"orgId"`
}

type DeleteOrganisationResponseObject interface {
	VisitDeleteOrganisationResponse(w http.ResponseWriter) error
}

type DeleteOrganisation204Response struct {
}

func (response DeleteOrganisation204Response) VisitDeleteOrganisationResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type GetOrganisationRequestObject struct {
	OrgId string `json:"orgId"`
}

type GetOrganisationResponseObject interface {
	VisitGetOrganisationResponse(w http.ResponseWriter) error
}

type GetOrganisation200JSONResponse Organisation

func (response GetOrganisation200JSONResponse) VisitGetOrganisationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AddUserToOrganisationRequestObject struct {
	OrgId string `json:"orgId"`
	Body  *AddUserToOrganisationJSONRequestBody
}

type AddUserToOrganisationResponseObject interface {
	VisitAddUserToOrganisationResponse(w http.ResponseWriter) error
}

type AddUserToOrganisation200JSONResponse Organisation

func (response AddUserToOrganisation200JSONResponse) VisitAddUserToOrganisationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAllProjectsInOrganisationRequestObject struct {
	OrgId string `json:"orgId"`
}

type GetAllProjectsInOrganisationResponseObject interface {
	VisitGetAllProjectsInOrganisationResponse(w http.ResponseWriter) error
}

type GetAllProjectsInOrganisation200JSONResponse []Project

func (response GetAllProjectsInOrganisation200JSONResponse) VisitGetAllProjectsInOrganisationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAllTeamsInOrgRequestObject struct {
	OrgId string `json:"orgId"`
}

type GetAllTeamsInOrgResponseObject interface {
	VisitGetAllTeamsInOrgResponse(w http.ResponseWriter) error
}

type GetAllTeamsInOrg200JSONResponse []Team

func (response GetAllTeamsInOrg200JSONResponse) VisitGetAllTeamsInOrgResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateTeamRequestObject struct {
	OrgId string `json:"orgId"`
	Body  *CreateTeamJSONRequestBody
}

type CreateTeamResponseObject interface {
	VisitCreateTeamResponse(w http.ResponseWriter) error
}

type CreateTeam201JSONResponse Team

func (response CreateTeam201JSONResponse) VisitCreateTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type DeleteTeamRequestObject struct {
	OrgId  string `json:"orgId"`
	TeamId string `json:"teamId"`
}

type DeleteTeamResponseObject interface {
	VisitDeleteTeamResponse(w http.ResponseWriter) error
}

type DeleteTeam204Response struct {
}

func (response DeleteTeam204Response) VisitDeleteTeamResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type GetTeamRequestObject struct {
	OrgId  string `json:"orgId"`
	TeamId string `json:"teamId"`
}

type GetTeamResponseObject interface {
	VisitGetTeamResponse(w http.ResponseWriter) error
}

type GetTeam200JSONResponse Team

func (response GetTeam200JSONResponse) VisitGetTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AddUserToTeamRequestObject struct {
	OrgId  string `json:"orgId"`
	TeamId string `json:"teamId"`
	Body   *AddUserToTeamJSONRequestBody
}

type AddUserToTeamResponseObject interface {
	VisitAddUserToTeamResponse(w http.ResponseWriter) error
}

type AddUserToTeam200JSONResponse Team

func (response AddUserToTeam200JSONResponse) VisitAddUserToTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAllProjectsInTeamRequestObject struct {
	OrgId  string `json:"orgId"`
	TeamId string `json:"teamId"`
}

type GetAllProjectsInTeamResponseObject interface {
	VisitGetAllProjectsInTeamResponse(w http.ResponseWriter) error
}

type GetAllProjectsInTeam200JSONResponse []Project

func (response GetAllProjectsInTeam200JSONResponse) VisitGetAllProjectsInTeamResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateProjectRequestObject struct {
	OrgId  string `json:"orgId"`
	TeamId string `json:"teamId"`
	Body   *CreateProjectJSONRequestBody
}

type CreateProjectResponseObject interface {
	VisitCreateProjectResponse(w http.ResponseWriter) error
}

type CreateProject201JSONResponse Project

func (response CreateProject201JSONResponse) VisitCreateProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type DeleteProjectRequestObject struct {
	OrgId     string `json:"orgId"`
	TeamId    string `json:"teamId"`
	ProjectId string `json:"projectId"`
}

type DeleteProjectResponseObject interface {
	VisitDeleteProjectResponse(w http.ResponseWriter) error
}

type DeleteProject204Response struct {
}

func (response DeleteProject204Response) VisitDeleteProjectResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type AddUserToProjectRequestObject struct {
	OrgId     string `json:"orgId"`
	TeamId    string `json:"teamId"`
	ProjectId string `json:"projectId"`
	Body      *AddUserToProjectJSONRequestBody
}

type AddUserToProjectResponseObject interface {
	VisitAddUserToProjectResponse(w http.ResponseWriter) error
}

type AddUserToProject201JSONResponse Project

func (response AddUserToProject201JSONResponse) VisitAddUserToProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type GetAllProjectsForUserRequestObject struct {
}

type GetAllProjectsForUserResponseObject interface {
	VisitGetAllProjectsForUserResponse(w http.ResponseWriter) error
}

type GetAllProjectsForUser200JSONResponse []Project

func (response GetAllProjectsForUser200JSONResponse) VisitGetAllProjectsForUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetProjectRequestObject struct {
	ProjectId string `json:"projectId"`
}

type GetProjectResponseObject interface {
	VisitGetProjectResponse(w http.ResponseWriter) error
}

type GetProject200JSONResponse Project

func (response GetProject200JSONResponse) VisitGetProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetBacklogRequestObject struct {
	ProjectId string `json:"projectId"`
}

type GetBacklogResponseObject interface {
	VisitGetBacklogResponse(w http.ResponseWriter) error
}

type GetBacklog200JSONResponse []Task

func (response GetBacklog200JSONResponse) VisitGetBacklogResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetBoardRequestObject struct {
	ProjectId string `json:"projectId"`
}

type GetBoardResponseObject interface {
	VisitGetBoardResponse(w http.ResponseWriter) error
}

type GetBoard200JSONResponse Board

func (response GetBoard200JSONResponse) VisitGetBoardResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAllColumnsRequestObject struct {
	ProjectId string `json:"projectId"`
}

type GetAllColumnsResponseObject interface {
	VisitGetAllColumnsResponse(w http.ResponseWriter) error
}

type GetAllColumns200JSONResponse []BoardColumn

func (response GetAllColumns200JSONResponse) VisitGetAllColumnsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateColumnRequestObject struct {
	ProjectId string `json:"projectId"`
	Body      *CreateColumnJSONRequestBody
}

type CreateColumnResponseObject interface {
	VisitCreateColumnResponse(w http.ResponseWriter) error
}

type CreateColumn200JSONResponse BoardColumn

func (response CreateColumn200JSONResponse) VisitCreateColumnResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteColumnRequestObject struct {
	ProjectId string `json:"projectId"`
	ColumnId  string `json:"columnId"`
}

type DeleteColumnResponseObject interface {
	VisitDeleteColumnResponse(w http.ResponseWriter) error
}

type DeleteColumn200Response struct {
}

func (response DeleteColumn200Response) VisitDeleteColumnResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type GetColumnRequestObject struct {
	ProjectId string `json:"projectId"`
	ColumnId  string `json:"columnId"`
}

type GetColumnResponseObject interface {
	VisitGetColumnResponse(w http.ResponseWriter) error
}

type GetColumn200JSONResponse BoardColumn

func (response GetColumn200JSONResponse) VisitGetColumnResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateColumnRequestObject struct {
	ProjectId string `json:"projectId"`
	ColumnId  string `json:"columnId"`
	Body      *UpdateColumnJSONRequestBody
}

type UpdateColumnResponseObject interface {
	VisitUpdateColumnResponse(w http.ResponseWriter) error
}

type UpdateColumn200JSONResponse BoardColumn

func (response UpdateColumn200JSONResponse) VisitUpdateColumnResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAllTasksInColumnRequestObject struct {
	ProjectId string `json:"projectId"`
	ColumnId  string `json:"columnId"`
}

type GetAllTasksInColumnResponseObject interface {
	VisitGetAllTasksInColumnResponse(w http.ResponseWriter) error
}

type GetAllTasksInColumn200JSONResponse []Task

func (response GetAllTasksInColumn200JSONResponse) VisitGetAllTasksInColumnResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateTaskInColumnRequestObject struct {
	ProjectId string `json:"projectId"`
	ColumnId  string `json:"columnId"`
	Body      *CreateTaskInColumnJSONRequestBody
}

type CreateTaskInColumnResponseObject interface {
	VisitCreateTaskInColumnResponse(w http.ResponseWriter) error
}

type CreateTaskInColumn201JSONResponse Task

func (response CreateTaskInColumn201JSONResponse) VisitCreateTaskInColumnResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type GetAllProjectMembersRequestObject struct {
	ProjectId string `json:"projectId"`
}

type GetAllProjectMembersResponseObject interface {
	VisitGetAllProjectMembersResponse(w http.ResponseWriter) error
}

type GetAllProjectMembers200JSONResponse []User

func (response GetAllProjectMembers200JSONResponse) VisitGetAllProjectMembersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAllSprintsRequestObject struct {
	ProjectId string `json:"projectId"`
}

type GetAllSprintsResponseObject interface {
	VisitGetAllSprintsResponse(w http.ResponseWriter) error
}

type GetAllSprints200JSONResponse []Sprint

func (response GetAllSprints200JSONResponse) VisitGetAllSprintsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateSprintRequestObject struct {
	ProjectId string `json:"projectId"`
	Body      *CreateSprintJSONRequestBody
}

type CreateSprintResponseObject interface {
	VisitCreateSprintResponse(w http.ResponseWriter) error
}

type CreateSprint201JSONResponse Sprint

func (response CreateSprint201JSONResponse) VisitCreateSprintResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type DeleteSprintRequestObject struct {
	ProjectId string `json:"projectId"`
	SprintId  string `json:"sprintId"`
}

type DeleteSprintResponseObject interface {
	VisitDeleteSprintResponse(w http.ResponseWriter) error
}

type DeleteSprint204Response struct {
}

func (response DeleteSprint204Response) VisitDeleteSprintResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type GetSprintRequestObject struct {
	ProjectId string `json:"projectId"`
	SprintId  string `json:"sprintId"`
}

type GetSprintResponseObject interface {
	VisitGetSprintResponse(w http.ResponseWriter) error
}

type GetSprint200JSONResponse Sprint

func (response GetSprint200JSONResponse) VisitGetSprintResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateSprintRequestObject struct {
	ProjectId string `json:"projectId"`
	SprintId  string `json:"sprintId"`
	Body      *UpdateSprintJSONRequestBody
}

type UpdateSprintResponseObject interface {
	VisitUpdateSprintResponse(w http.ResponseWriter) error
}

type UpdateSprint200JSONResponse Sprint

func (response UpdateSprint200JSONResponse) VisitUpdateSprintResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAllTasksRequestObject struct {
	ProjectId string `json:"projectId"`
}

type GetAllTasksResponseObject interface {
	VisitGetAllTasksResponse(w http.ResponseWriter) error
}

type GetAllTasks200JSONResponse []Task

func (response GetAllTasks200JSONResponse) VisitGetAllTasksResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateTaskRequestObject struct {
	ProjectId string `json:"projectId"`
	Body      *CreateTaskJSONRequestBody
}

type CreateTaskResponseObject interface {
	VisitCreateTaskResponse(w http.ResponseWriter) error
}

type CreateTask201JSONResponse Task

func (response CreateTask201JSONResponse) VisitCreateTaskResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateTaskStateRequestObject struct {
	ProjectId string `json:"projectId"`
	Body      *CreateTaskStateJSONRequestBody
}

type CreateTaskStateResponseObject interface {
	VisitCreateTaskStateResponse(w http.ResponseWriter) error
}

type CreateTaskState201JSONResponse TaskState

func (response CreateTaskState201JSONResponse) VisitCreateTaskStateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type DeleteTaskRequestObject struct {
	ProjectId string `json:"projectId"`
	TaskId    string `json:"taskId"`
}

type DeleteTaskResponseObject interface {
	VisitDeleteTaskResponse(w http.ResponseWriter) error
}

type DeleteTask204Response struct {
}

func (response DeleteTask204Response) VisitDeleteTaskResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type GetTaskRequestObject struct {
	ProjectId string `json:"projectId"`
	TaskId    string `json:"taskId"`
}

type GetTaskResponseObject interface {
	VisitGetTaskResponse(w http.ResponseWriter) error
}

type GetTask200JSONResponse Task

func (response GetTask200JSONResponse) VisitGetTaskResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateTaskRequestObject struct {
	ProjectId string `json:"projectId"`
	TaskId    string `json:"taskId"`
	Body      *UpdateTaskJSONRequestBody
}

type UpdateTaskResponseObject interface {
	VisitUpdateTaskResponse(w http.ResponseWriter) error
}

type UpdateTask200JSONResponse Task

func (response UpdateTask200JSONResponse) VisitUpdateTaskResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type RegisterRequestObject struct {
	Body *RegisterJSONRequestBody
}

type RegisterResponseObject interface {
	VisitRegisterResponse(w http.ResponseWriter) error
}

type Register201Response struct {
}

func (response Register201Response) VisitRegisterResponse(w http.ResponseWriter) error {
	w.WriteHeader(201)
	return nil
}

type CreateTaskCommentRequestObject struct {
	TaskId string `json:"taskId"`
	Body   *CreateTaskCommentJSONRequestBody
}

type CreateTaskCommentResponseObject interface {
	VisitCreateTaskCommentResponse(w http.ResponseWriter) error
}

type CreateTaskComment201JSONResponse TaskComment

func (response CreateTaskComment201JSONResponse) VisitCreateTaskCommentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type DeleteTaskCommentRequestObject struct {
	TaskId    string `json:"taskId"`
	CommentId string `json:"commentId"`
}

type DeleteTaskCommentResponseObject interface {
	VisitDeleteTaskCommentResponse(w http.ResponseWriter) error
}

type DeleteTaskComment204Response struct {
}

func (response DeleteTaskComment204Response) VisitDeleteTaskCommentResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type UpdateTaskCommentRequestObject struct {
	TaskId    string `json:"taskId"`
	CommentId string `json:"commentId"`
	Body      *UpdateTaskCommentJSONRequestBody
}

type UpdateTaskCommentResponseObject interface {
	VisitUpdateTaskCommentResponse(w http.ResponseWriter) error
}

type UpdateTaskComment200JSONResponse TaskComment

func (response UpdateTaskComment200JSONResponse) VisitUpdateTaskCommentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateSubtaskRequestObject struct {
	TaskId string `json:"taskId"`
	Body   *CreateSubtaskJSONRequestBody
}

type CreateSubtaskResponseObject interface {
	VisitCreateSubtaskResponse(w http.ResponseWriter) error
}

type CreateSubtask201JSONResponse Subtask

func (response CreateSubtask201JSONResponse) VisitCreateSubtaskResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type DeleteSubtaskRequestObject struct {
	TaskId    string `json:"taskId"`
	SubtaskId string `json:"subtaskId"`
}

type DeleteSubtaskResponseObject interface {
	VisitDeleteSubtaskResponse(w http.ResponseWriter) error
}

type DeleteSubtask204Response struct {
}

func (response DeleteSubtask204Response) VisitDeleteSubtaskResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type UpdateSubtaskRequestObject struct {
	TaskId    string `json:"taskId"`
	SubtaskId string `json:"subtaskId"`
	Body      *UpdateSubtaskJSONRequestBody
}

type UpdateSubtaskResponseObject interface {
	VisitUpdateSubtaskResponse(w http.ResponseWriter) error
}

type UpdateSubtask200JSONResponse Subtask

func (response UpdateSubtask200JSONResponse) VisitUpdateSubtaskResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAllTeamsRequestObject struct {
}

type GetAllTeamsResponseObject interface {
	VisitGetAllTeamsResponse(w http.ResponseWriter) error
}

type GetAllTeams200JSONResponse []Team

func (response GetAllTeams200JSONResponse) VisitGetAllTeamsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAllUsersRequestObject struct {
}

type GetAllUsersResponseObject interface {
	VisitGetAllUsersResponse(w http.ResponseWriter) error
}

type GetAllUsers200JSONResponse map[string]interface{}

func (response GetAllUsers200JSONResponse) VisitGetAllUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteUserRequestObject struct {
	UserId string `json:"userId"`
}

type DeleteUserResponseObject interface {
	VisitDeleteUserResponse(w http.ResponseWriter) error
}

type DeleteUser200Response struct {
}

func (response DeleteUser200Response) VisitDeleteUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type GetUserRequestObject struct {
	UserId string `json:"userId"`
}

type GetUserResponseObject interface {
	VisitGetUserResponse(w http.ResponseWriter) error
}

type GetUser200JSONResponse User

func (response GetUser200JSONResponse) VisitGetUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateUserRequestObject struct {
	UserId string `json:"userId"`
	Body   *UpdateUserJSONRequestBody
}

type UpdateUserResponseObject interface {
	VisitUpdateUserResponse(w http.ResponseWriter) error
}

type UpdateUser200JSONResponse User

func (response UpdateUser200JSONResponse) VisitUpdateUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (POST /login)
	Login(ctx context.Context, request LoginRequestObject) (LoginResponseObject, error)

	// (GET /orgs)
	GetAllOrganisations(ctx context.Context, request GetAllOrganisationsRequestObject) (GetAllOrganisationsResponseObject, error)

	// (POST /orgs)
	CreateOrganisation(ctx context.Context, request CreateOrganisationRequestObject) (CreateOrganisationResponseObject, error)

	// (DELETE /orgs/{orgId})
	DeleteOrganisation(ctx context.Context, request DeleteOrganisationRequestObject) (DeleteOrganisationResponseObject, error)

	// (GET /orgs/{orgId})
	GetOrganisation(ctx context.Context, request GetOrganisationRequestObject) (GetOrganisationResponseObject, error)

	// (POST /orgs/{orgId})
	AddUserToOrganisation(ctx context.Context, request AddUserToOrganisationRequestObject) (AddUserToOrganisationResponseObject, error)

	// (GET /orgs/{orgId}/projects)
	GetAllProjectsInOrganisation(ctx context.Context, request GetAllProjectsInOrganisationRequestObject) (GetAllProjectsInOrganisationResponseObject, error)

	// (GET /orgs/{orgId}/teams)
	GetAllTeamsInOrg(ctx context.Context, request GetAllTeamsInOrgRequestObject) (GetAllTeamsInOrgResponseObject, error)

	// (POST /orgs/{orgId}/teams)
	CreateTeam(ctx context.Context, request CreateTeamRequestObject) (CreateTeamResponseObject, error)

	// (DELETE /orgs/{orgId}/teams/{teamId})
	DeleteTeam(ctx context.Context, request DeleteTeamRequestObject) (DeleteTeamResponseObject, error)

	// (GET /orgs/{orgId}/teams/{teamId})
	GetTeam(ctx context.Context, request GetTeamRequestObject) (GetTeamResponseObject, error)

	// (POST /orgs/{orgId}/teams/{teamId})
	AddUserToTeam(ctx context.Context, request AddUserToTeamRequestObject) (AddUserToTeamResponseObject, error)

	// (GET /orgs/{orgId}/teams/{teamId}/projects)
	GetAllProjectsInTeam(ctx context.Context, request GetAllProjectsInTeamRequestObject) (GetAllProjectsInTeamResponseObject, error)

	// (POST /orgs/{orgId}/teams/{teamId}/projects)
	CreateProject(ctx context.Context, request CreateProjectRequestObject) (CreateProjectResponseObject, error)

	// (DELETE /orgs/{orgId}/teams/{teamId}/projects/{projectId})
	DeleteProject(ctx context.Context, request DeleteProjectRequestObject) (DeleteProjectResponseObject, error)

	// (POST /orgs/{orgId}/teams/{teamId}/projects/{projectId})
	AddUserToProject(ctx context.Context, request AddUserToProjectRequestObject) (AddUserToProjectResponseObject, error)

	// (GET /projects)
	GetAllProjectsForUser(ctx context.Context, request GetAllProjectsForUserRequestObject) (GetAllProjectsForUserResponseObject, error)

	// (GET /projects/{projectId})
	GetProject(ctx context.Context, request GetProjectRequestObject) (GetProjectResponseObject, error)

	// (GET /projects/{projectId}/backlog/tasks)
	GetBacklog(ctx context.Context, request GetBacklogRequestObject) (GetBacklogResponseObject, error)

	// (GET /projects/{projectId}/board)
	GetBoard(ctx context.Context, request GetBoardRequestObject) (GetBoardResponseObject, error)

	// (GET /projects/{projectId}/board/columns)
	GetAllColumns(ctx context.Context, request GetAllColumnsRequestObject) (GetAllColumnsResponseObject, error)

	// (POST /projects/{projectId}/board/columns)
	CreateColumn(ctx context.Context, request CreateColumnRequestObject) (CreateColumnResponseObject, error)

	// (DELETE /projects/{projectId}/board/columns/{columnId})
	DeleteColumn(ctx context.Context, request DeleteColumnRequestObject) (DeleteColumnResponseObject, error)

	// (GET /projects/{projectId}/board/columns/{columnId})
	GetColumn(ctx context.Context, request GetColumnRequestObject) (GetColumnResponseObject, error)

	// (PATCH /projects/{projectId}/board/columns/{columnId})
	UpdateColumn(ctx context.Context, request UpdateColumnRequestObject) (UpdateColumnResponseObject, error)

	// (GET /projects/{projectId}/board/columns/{columnId}/tasks)
	GetAllTasksInColumn(ctx context.Context, request GetAllTasksInColumnRequestObject) (GetAllTasksInColumnResponseObject, error)

	// (POST /projects/{projectId}/board/columns/{columnId}/tasks)
	CreateTaskInColumn(ctx context.Context, request CreateTaskInColumnRequestObject) (CreateTaskInColumnResponseObject, error)

	// (GET /projects/{projectId}/members)
	GetAllProjectMembers(ctx context.Context, request GetAllProjectMembersRequestObject) (GetAllProjectMembersResponseObject, error)

	// (GET /projects/{projectId}/sprints)
	GetAllSprints(ctx context.Context, request GetAllSprintsRequestObject) (GetAllSprintsResponseObject, error)

	// (POST /projects/{projectId}/sprints)
	CreateSprint(ctx context.Context, request CreateSprintRequestObject) (CreateSprintResponseObject, error)

	// (DELETE /projects/{projectId}/sprints/{sprintId})
	DeleteSprint(ctx context.Context, request DeleteSprintRequestObject) (DeleteSprintResponseObject, error)

	// (GET /projects/{projectId}/sprints/{sprintId})
	GetSprint(ctx context.Context, request GetSprintRequestObject) (GetSprintResponseObject, error)

	// (PATCH /projects/{projectId}/sprints/{sprintId})
	UpdateSprint(ctx context.Context, request UpdateSprintRequestObject) (UpdateSprintResponseObject, error)

	// (GET /projects/{projectId}/tasks)
	GetAllTasks(ctx context.Context, request GetAllTasksRequestObject) (GetAllTasksResponseObject, error)

	// (POST /projects/{projectId}/tasks)
	CreateTask(ctx context.Context, request CreateTaskRequestObject) (CreateTaskResponseObject, error)

	// (POST /projects/{projectId}/tasks/states)
	CreateTaskState(ctx context.Context, request CreateTaskStateRequestObject) (CreateTaskStateResponseObject, error)

	// (DELETE /projects/{projectId}/tasks/{taskId})
	DeleteTask(ctx context.Context, request DeleteTaskRequestObject) (DeleteTaskResponseObject, error)

	// (GET /projects/{projectId}/tasks/{taskId})
	GetTask(ctx context.Context, request GetTaskRequestObject) (GetTaskResponseObject, error)

	// (PATCH /projects/{projectId}/tasks/{taskId})
	UpdateTask(ctx context.Context, request UpdateTaskRequestObject) (UpdateTaskResponseObject, error)

	// (POST /register)
	Register(ctx context.Context, request RegisterRequestObject) (RegisterResponseObject, error)

	// (POST /tasks/{taskId}/comments)
	CreateTaskComment(ctx context.Context, request CreateTaskCommentRequestObject) (CreateTaskCommentResponseObject, error)

	// (DELETE /tasks/{taskId}/comments/{commentId})
	DeleteTaskComment(ctx context.Context, request DeleteTaskCommentRequestObject) (DeleteTaskCommentResponseObject, error)

	// (PATCH /tasks/{taskId}/comments/{commentId})
	UpdateTaskComment(ctx context.Context, request UpdateTaskCommentRequestObject) (UpdateTaskCommentResponseObject, error)

	// (POST /tasks/{taskId}/subtasks)
	CreateSubtask(ctx context.Context, request CreateSubtaskRequestObject) (CreateSubtaskResponseObject, error)

	// (DELETE /tasks/{taskId}/subtasks/{subtaskId})
	DeleteSubtask(ctx context.Context, request DeleteSubtaskRequestObject) (DeleteSubtaskResponseObject, error)

	// (PATCH /tasks/{taskId}/subtasks/{subtaskId})
	UpdateSubtask(ctx context.Context, request UpdateSubtaskRequestObject) (UpdateSubtaskResponseObject, error)

	// (GET /teams)
	GetAllTeams(ctx context.Context, request GetAllTeamsRequestObject) (GetAllTeamsResponseObject, error)

	// (GET /users)
	GetAllUsers(ctx context.Context, request GetAllUsersRequestObject) (GetAllUsersResponseObject, error)

	// (DELETE /users/{userId})
	DeleteUser(ctx context.Context, request DeleteUserRequestObject) (DeleteUserResponseObject, error)

	// (GET /users/{userId})
	GetUser(ctx context.Context, request GetUserRequestObject) (GetUserResponseObject, error)

	// (PATCH /users/{userId})
	UpdateUser(ctx context.Context, request UpdateUserRequestObject) (UpdateUserResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// Login operation middleware
func (sh *strictHandler) Login(ctx echo.Context) error {
	var request LoginRequestObject

	var body LoginJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Login(ctx.Request().Context(), request.(LoginRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Login")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(LoginResponseObject); ok {
		return validResponse.VisitLoginResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetAllOrganisations operation middleware
func (sh *strictHandler) GetAllOrganisations(ctx echo.Context) error {
	var request GetAllOrganisationsRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAllOrganisations(ctx.Request().Context(), request.(GetAllOrganisationsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAllOrganisations")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetAllOrganisationsResponseObject); ok {
		return validResponse.VisitGetAllOrganisationsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// CreateOrganisation operation middleware
func (sh *strictHandler) CreateOrganisation(ctx echo.Context) error {
	var request CreateOrganisationRequestObject

	var body CreateOrganisationJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateOrganisation(ctx.Request().Context(), request.(CreateOrganisationRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateOrganisation")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CreateOrganisationResponseObject); ok {
		return validResponse.VisitCreateOrganisationResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteOrganisation operation middleware
func (sh *strictHandler) DeleteOrganisation(ctx echo.Context, orgId string) error {
	var request DeleteOrganisationRequestObject

	request.OrgId = orgId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteOrganisation(ctx.Request().Context(), request.(DeleteOrganisationRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteOrganisation")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteOrganisationResponseObject); ok {
		return validResponse.VisitDeleteOrganisationResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetOrganisation operation middleware
func (sh *strictHandler) GetOrganisation(ctx echo.Context, orgId string) error {
	var request GetOrganisationRequestObject

	request.OrgId = orgId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetOrganisation(ctx.Request().Context(), request.(GetOrganisationRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetOrganisation")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetOrganisationResponseObject); ok {
		return validResponse.VisitGetOrganisationResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// AddUserToOrganisation operation middleware
func (sh *strictHandler) AddUserToOrganisation(ctx echo.Context, orgId string) error {
	var request AddUserToOrganisationRequestObject

	request.OrgId = orgId

	var body AddUserToOrganisationJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AddUserToOrganisation(ctx.Request().Context(), request.(AddUserToOrganisationRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AddUserToOrganisation")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AddUserToOrganisationResponseObject); ok {
		return validResponse.VisitAddUserToOrganisationResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetAllProjectsInOrganisation operation middleware
func (sh *strictHandler) GetAllProjectsInOrganisation(ctx echo.Context, orgId string) error {
	var request GetAllProjectsInOrganisationRequestObject

	request.OrgId = orgId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAllProjectsInOrganisation(ctx.Request().Context(), request.(GetAllProjectsInOrganisationRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAllProjectsInOrganisation")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetAllProjectsInOrganisationResponseObject); ok {
		return validResponse.VisitGetAllProjectsInOrganisationResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetAllTeamsInOrg operation middleware
func (sh *strictHandler) GetAllTeamsInOrg(ctx echo.Context, orgId string) error {
	var request GetAllTeamsInOrgRequestObject

	request.OrgId = orgId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAllTeamsInOrg(ctx.Request().Context(), request.(GetAllTeamsInOrgRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAllTeamsInOrg")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetAllTeamsInOrgResponseObject); ok {
		return validResponse.VisitGetAllTeamsInOrgResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// CreateTeam operation middleware
func (sh *strictHandler) CreateTeam(ctx echo.Context, orgId string) error {
	var request CreateTeamRequestObject

	request.OrgId = orgId

	var body CreateTeamJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateTeam(ctx.Request().Context(), request.(CreateTeamRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateTeam")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CreateTeamResponseObject); ok {
		return validResponse.VisitCreateTeamResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteTeam operation middleware
func (sh *strictHandler) DeleteTeam(ctx echo.Context, orgId string, teamId string) error {
	var request DeleteTeamRequestObject

	request.OrgId = orgId
	request.TeamId = teamId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteTeam(ctx.Request().Context(), request.(DeleteTeamRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteTeam")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteTeamResponseObject); ok {
		return validResponse.VisitDeleteTeamResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetTeam operation middleware
func (sh *strictHandler) GetTeam(ctx echo.Context, orgId string, teamId string) error {
	var request GetTeamRequestObject

	request.OrgId = orgId
	request.TeamId = teamId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetTeam(ctx.Request().Context(), request.(GetTeamRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetTeam")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetTeamResponseObject); ok {
		return validResponse.VisitGetTeamResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// AddUserToTeam operation middleware
func (sh *strictHandler) AddUserToTeam(ctx echo.Context, orgId string, teamId string) error {
	var request AddUserToTeamRequestObject

	request.OrgId = orgId
	request.TeamId = teamId

	var body AddUserToTeamJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AddUserToTeam(ctx.Request().Context(), request.(AddUserToTeamRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AddUserToTeam")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AddUserToTeamResponseObject); ok {
		return validResponse.VisitAddUserToTeamResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetAllProjectsInTeam operation middleware
func (sh *strictHandler) GetAllProjectsInTeam(ctx echo.Context, orgId string, teamId string) error {
	var request GetAllProjectsInTeamRequestObject

	request.OrgId = orgId
	request.TeamId = teamId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAllProjectsInTeam(ctx.Request().Context(), request.(GetAllProjectsInTeamRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAllProjectsInTeam")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetAllProjectsInTeamResponseObject); ok {
		return validResponse.VisitGetAllProjectsInTeamResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// CreateProject operation middleware
func (sh *strictHandler) CreateProject(ctx echo.Context, orgId string, teamId string) error {
	var request CreateProjectRequestObject

	request.OrgId = orgId
	request.TeamId = teamId

	var body CreateProjectJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateProject(ctx.Request().Context(), request.(CreateProjectRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateProject")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CreateProjectResponseObject); ok {
		return validResponse.VisitCreateProjectResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteProject operation middleware
func (sh *strictHandler) DeleteProject(ctx echo.Context, orgId string, teamId string, projectId string) error {
	var request DeleteProjectRequestObject

	request.OrgId = orgId
	request.TeamId = teamId
	request.ProjectId = projectId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteProject(ctx.Request().Context(), request.(DeleteProjectRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteProject")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteProjectResponseObject); ok {
		return validResponse.VisitDeleteProjectResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// AddUserToProject operation middleware
func (sh *strictHandler) AddUserToProject(ctx echo.Context, orgId string, teamId string, projectId string) error {
	var request AddUserToProjectRequestObject

	request.OrgId = orgId
	request.TeamId = teamId
	request.ProjectId = projectId

	var body AddUserToProjectJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AddUserToProject(ctx.Request().Context(), request.(AddUserToProjectRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AddUserToProject")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AddUserToProjectResponseObject); ok {
		return validResponse.VisitAddUserToProjectResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetAllProjectsForUser operation middleware
func (sh *strictHandler) GetAllProjectsForUser(ctx echo.Context) error {
	var request GetAllProjectsForUserRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAllProjectsForUser(ctx.Request().Context(), request.(GetAllProjectsForUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAllProjectsForUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetAllProjectsForUserResponseObject); ok {
		return validResponse.VisitGetAllProjectsForUserResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetProject operation middleware
func (sh *strictHandler) GetProject(ctx echo.Context, projectId string) error {
	var request GetProjectRequestObject

	request.ProjectId = projectId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetProject(ctx.Request().Context(), request.(GetProjectRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetProject")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetProjectResponseObject); ok {
		return validResponse.VisitGetProjectResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetBacklog operation middleware
func (sh *strictHandler) GetBacklog(ctx echo.Context, projectId string) error {
	var request GetBacklogRequestObject

	request.ProjectId = projectId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetBacklog(ctx.Request().Context(), request.(GetBacklogRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetBacklog")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetBacklogResponseObject); ok {
		return validResponse.VisitGetBacklogResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetBoard operation middleware
func (sh *strictHandler) GetBoard(ctx echo.Context, projectId string) error {
	var request GetBoardRequestObject

	request.ProjectId = projectId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetBoard(ctx.Request().Context(), request.(GetBoardRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetBoard")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetBoardResponseObject); ok {
		return validResponse.VisitGetBoardResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetAllColumns operation middleware
func (sh *strictHandler) GetAllColumns(ctx echo.Context, projectId string) error {
	var request GetAllColumnsRequestObject

	request.ProjectId = projectId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAllColumns(ctx.Request().Context(), request.(GetAllColumnsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAllColumns")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetAllColumnsResponseObject); ok {
		return validResponse.VisitGetAllColumnsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// CreateColumn operation middleware
func (sh *strictHandler) CreateColumn(ctx echo.Context, projectId string) error {
	var request CreateColumnRequestObject

	request.ProjectId = projectId

	var body CreateColumnJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateColumn(ctx.Request().Context(), request.(CreateColumnRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateColumn")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CreateColumnResponseObject); ok {
		return validResponse.VisitCreateColumnResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteColumn operation middleware
func (sh *strictHandler) DeleteColumn(ctx echo.Context, projectId string, columnId string) error {
	var request DeleteColumnRequestObject

	request.ProjectId = projectId
	request.ColumnId = columnId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteColumn(ctx.Request().Context(), request.(DeleteColumnRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteColumn")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteColumnResponseObject); ok {
		return validResponse.VisitDeleteColumnResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetColumn operation middleware
func (sh *strictHandler) GetColumn(ctx echo.Context, projectId string, columnId string) error {
	var request GetColumnRequestObject

	request.ProjectId = projectId
	request.ColumnId = columnId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetColumn(ctx.Request().Context(), request.(GetColumnRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetColumn")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetColumnResponseObject); ok {
		return validResponse.VisitGetColumnResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// UpdateColumn operation middleware
func (sh *strictHandler) UpdateColumn(ctx echo.Context, projectId string, columnId string) error {
	var request UpdateColumnRequestObject

	request.ProjectId = projectId
	request.ColumnId = columnId

	var body UpdateColumnJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateColumn(ctx.Request().Context(), request.(UpdateColumnRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateColumn")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(UpdateColumnResponseObject); ok {
		return validResponse.VisitUpdateColumnResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetAllTasksInColumn operation middleware
func (sh *strictHandler) GetAllTasksInColumn(ctx echo.Context, projectId string, columnId string) error {
	var request GetAllTasksInColumnRequestObject

	request.ProjectId = projectId
	request.ColumnId = columnId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAllTasksInColumn(ctx.Request().Context(), request.(GetAllTasksInColumnRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAllTasksInColumn")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetAllTasksInColumnResponseObject); ok {
		return validResponse.VisitGetAllTasksInColumnResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// CreateTaskInColumn operation middleware
func (sh *strictHandler) CreateTaskInColumn(ctx echo.Context, projectId string, columnId string) error {
	var request CreateTaskInColumnRequestObject

	request.ProjectId = projectId
	request.ColumnId = columnId

	var body CreateTaskInColumnJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateTaskInColumn(ctx.Request().Context(), request.(CreateTaskInColumnRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateTaskInColumn")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CreateTaskInColumnResponseObject); ok {
		return validResponse.VisitCreateTaskInColumnResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetAllProjectMembers operation middleware
func (sh *strictHandler) GetAllProjectMembers(ctx echo.Context, projectId string) error {
	var request GetAllProjectMembersRequestObject

	request.ProjectId = projectId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAllProjectMembers(ctx.Request().Context(), request.(GetAllProjectMembersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAllProjectMembers")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetAllProjectMembersResponseObject); ok {
		return validResponse.VisitGetAllProjectMembersResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetAllSprints operation middleware
func (sh *strictHandler) GetAllSprints(ctx echo.Context, projectId string) error {
	var request GetAllSprintsRequestObject

	request.ProjectId = projectId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAllSprints(ctx.Request().Context(), request.(GetAllSprintsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAllSprints")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetAllSprintsResponseObject); ok {
		return validResponse.VisitGetAllSprintsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// CreateSprint operation middleware
func (sh *strictHandler) CreateSprint(ctx echo.Context, projectId string) error {
	var request CreateSprintRequestObject

	request.ProjectId = projectId

	var body CreateSprintJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateSprint(ctx.Request().Context(), request.(CreateSprintRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateSprint")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CreateSprintResponseObject); ok {
		return validResponse.VisitCreateSprintResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteSprint operation middleware
func (sh *strictHandler) DeleteSprint(ctx echo.Context, projectId string, sprintId string) error {
	var request DeleteSprintRequestObject

	request.ProjectId = projectId
	request.SprintId = sprintId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteSprint(ctx.Request().Context(), request.(DeleteSprintRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteSprint")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteSprintResponseObject); ok {
		return validResponse.VisitDeleteSprintResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetSprint operation middleware
func (sh *strictHandler) GetSprint(ctx echo.Context, projectId string, sprintId string) error {
	var request GetSprintRequestObject

	request.ProjectId = projectId
	request.SprintId = sprintId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetSprint(ctx.Request().Context(), request.(GetSprintRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSprint")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetSprintResponseObject); ok {
		return validResponse.VisitGetSprintResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// UpdateSprint operation middleware
func (sh *strictHandler) UpdateSprint(ctx echo.Context, projectId string, sprintId string) error {
	var request UpdateSprintRequestObject

	request.ProjectId = projectId
	request.SprintId = sprintId

	var body UpdateSprintJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateSprint(ctx.Request().Context(), request.(UpdateSprintRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateSprint")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(UpdateSprintResponseObject); ok {
		return validResponse.VisitUpdateSprintResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetAllTasks operation middleware
func (sh *strictHandler) GetAllTasks(ctx echo.Context, projectId string) error {
	var request GetAllTasksRequestObject

	request.ProjectId = projectId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAllTasks(ctx.Request().Context(), request.(GetAllTasksRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAllTasks")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetAllTasksResponseObject); ok {
		return validResponse.VisitGetAllTasksResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// CreateTask operation middleware
func (sh *strictHandler) CreateTask(ctx echo.Context, projectId string) error {
	var request CreateTaskRequestObject

	request.ProjectId = projectId

	var body CreateTaskJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateTask(ctx.Request().Context(), request.(CreateTaskRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateTask")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CreateTaskResponseObject); ok {
		return validResponse.VisitCreateTaskResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// CreateTaskState operation middleware
func (sh *strictHandler) CreateTaskState(ctx echo.Context, projectId string) error {
	var request CreateTaskStateRequestObject

	request.ProjectId = projectId

	var body CreateTaskStateJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateTaskState(ctx.Request().Context(), request.(CreateTaskStateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateTaskState")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CreateTaskStateResponseObject); ok {
		return validResponse.VisitCreateTaskStateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteTask operation middleware
func (sh *strictHandler) DeleteTask(ctx echo.Context, projectId string, taskId string) error {
	var request DeleteTaskRequestObject

	request.ProjectId = projectId
	request.TaskId = taskId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteTask(ctx.Request().Context(), request.(DeleteTaskRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteTask")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteTaskResponseObject); ok {
		return validResponse.VisitDeleteTaskResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetTask operation middleware
func (sh *strictHandler) GetTask(ctx echo.Context, projectId string, taskId string) error {
	var request GetTaskRequestObject

	request.ProjectId = projectId
	request.TaskId = taskId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetTask(ctx.Request().Context(), request.(GetTaskRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetTask")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetTaskResponseObject); ok {
		return validResponse.VisitGetTaskResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// UpdateTask operation middleware
func (sh *strictHandler) UpdateTask(ctx echo.Context, projectId string, taskId string) error {
	var request UpdateTaskRequestObject

	request.ProjectId = projectId
	request.TaskId = taskId

	var body UpdateTaskJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateTask(ctx.Request().Context(), request.(UpdateTaskRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateTask")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(UpdateTaskResponseObject); ok {
		return validResponse.VisitUpdateTaskResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Register operation middleware
func (sh *strictHandler) Register(ctx echo.Context) error {
	var request RegisterRequestObject

	var body RegisterJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Register(ctx.Request().Context(), request.(RegisterRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Register")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(RegisterResponseObject); ok {
		return validResponse.VisitRegisterResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// CreateTaskComment operation middleware
func (sh *strictHandler) CreateTaskComment(ctx echo.Context, taskId string) error {
	var request CreateTaskCommentRequestObject

	request.TaskId = taskId

	var body CreateTaskCommentJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateTaskComment(ctx.Request().Context(), request.(CreateTaskCommentRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateTaskComment")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CreateTaskCommentResponseObject); ok {
		return validResponse.VisitCreateTaskCommentResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteTaskComment operation middleware
func (sh *strictHandler) DeleteTaskComment(ctx echo.Context, taskId string, commentId string) error {
	var request DeleteTaskCommentRequestObject

	request.TaskId = taskId
	request.CommentId = commentId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteTaskComment(ctx.Request().Context(), request.(DeleteTaskCommentRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteTaskComment")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteTaskCommentResponseObject); ok {
		return validResponse.VisitDeleteTaskCommentResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// UpdateTaskComment operation middleware
func (sh *strictHandler) UpdateTaskComment(ctx echo.Context, taskId string, commentId string) error {
	var request UpdateTaskCommentRequestObject

	request.TaskId = taskId
	request.CommentId = commentId

	var body UpdateTaskCommentJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateTaskComment(ctx.Request().Context(), request.(UpdateTaskCommentRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateTaskComment")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(UpdateTaskCommentResponseObject); ok {
		return validResponse.VisitUpdateTaskCommentResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// CreateSubtask operation middleware
func (sh *strictHandler) CreateSubtask(ctx echo.Context, taskId string) error {
	var request CreateSubtaskRequestObject

	request.TaskId = taskId

	var body CreateSubtaskJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateSubtask(ctx.Request().Context(), request.(CreateSubtaskRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateSubtask")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CreateSubtaskResponseObject); ok {
		return validResponse.VisitCreateSubtaskResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteSubtask operation middleware
func (sh *strictHandler) DeleteSubtask(ctx echo.Context, taskId string, subtaskId string) error {
	var request DeleteSubtaskRequestObject

	request.TaskId = taskId
	request.SubtaskId = subtaskId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteSubtask(ctx.Request().Context(), request.(DeleteSubtaskRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteSubtask")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteSubtaskResponseObject); ok {
		return validResponse.VisitDeleteSubtaskResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// UpdateSubtask operation middleware
func (sh *strictHandler) UpdateSubtask(ctx echo.Context, taskId string, subtaskId string) error {
	var request UpdateSubtaskRequestObject

	request.TaskId = taskId
	request.SubtaskId = subtaskId

	var body UpdateSubtaskJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateSubtask(ctx.Request().Context(), request.(UpdateSubtaskRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateSubtask")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(UpdateSubtaskResponseObject); ok {
		return validResponse.VisitUpdateSubtaskResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetAllTeams operation middleware
func (sh *strictHandler) GetAllTeams(ctx echo.Context) error {
	var request GetAllTeamsRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAllTeams(ctx.Request().Context(), request.(GetAllTeamsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAllTeams")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetAllTeamsResponseObject); ok {
		return validResponse.VisitGetAllTeamsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetAllUsers operation middleware
func (sh *strictHandler) GetAllUsers(ctx echo.Context) error {
	var request GetAllUsersRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAllUsers(ctx.Request().Context(), request.(GetAllUsersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAllUsers")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetAllUsersResponseObject); ok {
		return validResponse.VisitGetAllUsersResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteUser operation middleware
func (sh *strictHandler) DeleteUser(ctx echo.Context, userId string) error {
	var request DeleteUserRequestObject

	request.UserId = userId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteUser(ctx.Request().Context(), request.(DeleteUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteUserResponseObject); ok {
		return validResponse.VisitDeleteUserResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetUser operation middleware
func (sh *strictHandler) GetUser(ctx echo.Context, userId string) error {
	var request GetUserRequestObject

	request.UserId = userId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetUser(ctx.Request().Context(), request.(GetUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetUserResponseObject); ok {
		return validResponse.VisitGetUserResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// UpdateUser operation middleware
func (sh *strictHandler) UpdateUser(ctx echo.Context, userId string) error {
	var request UpdateUserRequestObject

	request.UserId = userId

	var body UpdateUserJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateUser(ctx.Request().Context(), request.(UpdateUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(UpdateUserResponseObject); ok {
		return validResponse.VisitUpdateUserResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xcTXPbNhP+K+/g7ZE25bYn3Rxn2vG0mXRq55TJARIRBbFIsACUxKPRf+8QAEmQBEhA",
	"Aig56U2JKHDx7LNf2IX3YE3ykhSo4Aws94CtP6Ecio+3WfaOIfpI3tINLDCDHJPiNSfVdyUlJaIcI/Hk",
	"jiF6n1Wf+HOJwBIwTnGxAYdDAij6Z4cpysDyff3ch6R+jqw+ozUHh6R92V+UVP8X/T2PCOaxXvKKQJoN",
	"V16T7S4vxEfMUS4+/ETRR7AE/09bNaRKB6lY5k78qFpVvQZSCp+rf68pghxlt7xa5yOhOeRgCTLI0RXH",
	"OQJJfwMJwFnn2d0OZ4PHEvDtisASX61JhjaouELfOIVXHG6EwBtCc7AEJcU5pM9/oGcBTCm1du+wfrUT",
	"zLfIgHACdmXmt6eeUuT7xPK6UEmDvQ6b/jqrGhX+A2Wuqi8d93tRmiIMV4aswV/s8hWiQjGQPT1wyNEU",
	"NR+bB/Vfuaofsid3K6heZaL/XCSq8dLR6e653lHSkMKHZXfiSY1rRq+kqy3HBc53OVjeJCMqNPowO2w9",
	"DOrtd/fZSGHfyGSwKGBuVltJ8RdFPfXdipAtgsVAOLFE+wO7MGPBZE45HkqKC7MYqMjcvYJVZsYhPZbu",
	"ahdyiUQINLKT3aqihHErGSmMqFnlNgsilrFLUPmDO5LnyALoWn43/br6wfFXGd8BGcObAtlsLENsTXHZ",
	"c7Pa975AJe72X1JMKObPDg9qIXtIKMFYmw8Z9TEWrWqYKAQ6zrWRu+9zNKy7Ib0RcVyBYiUfD2CSf+QV",
	"tjxyTv9SpbRm75JDvDVLARn7SqhZwVVu64ZO82Si3qWtbJL3T7LBhVXc8EKNCqPHKoMjuaCsLUeV2bon",
	"TRXCpqTJSkrytUDUeVUEc48EDsHcJEuQNE2pWYpfS9bi5ZOIqWTBkup7lm2XXrDNQyjHgmDEI9Zu3l1S",
	"mWsZK4Y6GvgVH22dY1gvQB2DYO6IU0iLqTFvNdWIopuP4n5b4mggtrrxMTOlnxDu1it3jmZKI4He51DE",
	"K4UPRb6QjNILiG6mVnPHgySyzAjCEvET4uqL7Ln5/ASqIDiDa1DJuXq7DqCPCh+N+utWTpPbWrXHIq5n",
	"bbKq8zMNVU8GCtqehDu6WDyDRxs7PNQrz/Fqc9oXatXn9MPSV3hkCMq5jKUI5zA7Y4XclsVasdypibvl",
	"sm6sDTKaWdTg6gV03856R+deJn/XHr+4nsvMYGTRTGVuF12j2FV011U766o56jfUO3ffb7MqUMIWNhtv",
	"7a0Dv5dKq0L7Bz/G0E50HNXodfIxWqkqJbpvrz5xiJyY90q9Tn3XyDzAzod578S3Pj2sC+pbSeG/hxaN",
	"2skZWzRSgllaNO2rjmnRDAqLl9nEmalN45uE9tPJ0VaNVGTYFkZvc06tCeHjgxxLWSWOFlgxe422iKPM",
	"zEjdtbuHp057xBCjRrs1IYOhPJfsLjU9ZXJqRPXpOAkRTG2nti3Wqqivj3aDnXjsGn6F/ouPRHrWgkPR",
	"w+h7MPC6Y9kqnNZNj/+9gQXcIFVafEGUyR8trhfXN4JBJSpgicES/HK9uF6ILfJPQhPplmxwoQK8QLey",
	"nyYFky0/IPFCjL8i2XMtqgoCsCy3eC1+kX5m0j9KWkyRptNOPHS1wukOif9gJSmYtOafFwsRBjvIVD88",
	"JCAlVJkYMuzid8Rvt9u3PcWZFnfeWAAjPAzULP/PrInhhE4ktZhHgZz0cxNMiC5yZqRqtad7Qjf32UGS",
	"ozLTIXrSfAfodaT/1cyuxMqp8eUWs4JR2TSFOeKiRHu/B5VVCzuva4klEDCBvhoTTYq+o/xgY6NxvjgS",
	"Ia2zzO4+42ycTPVQOuKblCtn90UP0Ehaje/7rCmBI3DNnMIIao/VMwKyWdy5eRjiIuyxnWeKGhXqgamZ",
	"o4EE3oc46V6mZQ5BoQHttGBgXmYxCwZxyJYY12nmDEJGkYjEHVwamTlqnMBd/+ARgoQxvPtLJWhnEj2q",
	"Z9Wm3Wd2ro0qT+Noum/6IA5OV4fUze9eNIHMC+mNoZDeMi4fTbf5Lo+Snq7xN0LFEeGFZr42I7LtrGXA",
	"tFkczcJoIdFDvTog6Qqun7ZkkzYTIzZ4XskHLxieEwb/fEGr77NawRIPvEwmqXHtYyBJtRu9Iw6k7eXH",
	"1/foGMbxiVXgMCTzFSVmzJSo15KeOW/vKOMUgqX7tWqmOeRFGqwuJ9/2cnR0obkAisdOc8K1bruWfkSH",
	"fP1pCKNsbkZlunH44jtg+nSMvt1uq/jG7oswVA0eUV8MeccOBCF76gAc7WBQjXLMfTAo9OnJWW2Qbbpy",
	"eNNOW73kVNI8jOcJnHabawS4h+ZeUfxt2e6LXViy9FBPbcczwHYEbmYTrFVwHJfSfT1e5JAcaTCedlZv",
	"W2gxEypzhxbtskC4vCgqqftznTOnREeS2jnp+YGSHYcM5b/MROdPypprzlPA1X/QKGpqElMxzd/3OIN2",
	"1NXwo1S0l5d2XLrLNb9P7C4bl1nMQte5o1VzISpcrIroZbqj7HM3lye8DEUbzLgajTY6k7/rJ2KauteQ",
	"5419yLNrfKl+XXjKVd41d++myXwcAeN6Su1Kxhl8ZXPH2k41i27Svfrk7C1bTYVrDR+hUdshjdpMcPek",
	"bzuml/Il0uLMRNJviI/W2Opi+Es0cO3W19zVe32d3lsf6V59civdG+1coFE3GwlbH2tbjlYgexJnMStx",
	"XCd4L254t5J+x6bPiN8xeTR8kvSGG0EjEqV7+berHWxuZODFp/QIMTczfTR9fOmh/pZ3SNNtthzLbv1v",
	"PUWH+nA4/BsAAP//xu8dVFBeAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
